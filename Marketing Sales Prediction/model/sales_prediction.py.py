# -*- coding: utf-8 -*-
"""HIGHWAY TO HELL

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HQCXB7fkB_tgnftb8FJbLBbY5QterpZp
"""

LIBRARIES

import pandas as pd
import numpy as np
from sklearn import preprocessing
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.metrics import mean_squared_error
from sklearn.preprocessing import scale
from sklearn.metrics import r2_score
from sklearn import metrics

"""LOADING THE DATASET"""

from google.colab import files 
uploaded = files.upload()

import io
df_new=pd.read_csv("Final Dataset.xlsx - Sheet1.csv")
df_new=pd.read_csv("D:\\DATA SCIENCE\\Project\\Final Dataset.xlsx - Sheet1.csv") 

"""FIRST 10 OBSERVATIONS"""
df_new["SLSMAN_CD"].value_counts().count()
df_new["SLSMAN_CD"].unique()
df_new.head(10)

"""COLUMN NAMES"""

df_new.columns

"""CONVERTING CATEGORICAL VARIABLES INTO NUMERICAL VALUES"""

Le=preprocessing.LabelEncoder()
df=df_new
df["PROD_CD"]=Le.fit_transform(df_new["PROD_CD"])
df["SLSMAN_CD"]=Le.fit_transform(df_new["SLSMAN_CD"])

"""REMOVING THE COMAS B/W THE NUMBERS"""

df_new['TARGET_IN_EA'] = df_new['TARGET_IN_EA'].str.replace(',', '').astype(float)
df_new['ACH_IN_EA'] = df_new['ACH_IN_EA'].str.replace(',', '').astype(float)

df_new=df_new.drop(["PLAN_YEAR"],axis=1)

"""REMOVING OUTLIERS FROM THE DATASET"""

from scipy import stats
z = np.abs(stats.zscore(df_new))
print(z)
threshold = 9
end = df_new[(z < 9).all(axis=1)]

end.corr()

"""Applying normalization"""

def norm_fun(i):
    x=(i-i.min())/(i.max()-(i.min()))
    return(x)

predictor=norm_fun(end.iloc[:,0:4])
target=norm_fun(pd.DataFrame(end.iloc[:,4]))

predictor=end.iloc[:,0:4]
target=pd.DataFrame(end.iloc[:,4])

"""SPLITTNG THE DATA'S"""

Xtrain,Xtest,Ytrain,Ytest=train_test_split(predictor,target,test_size=0.2,random_state=0)

"""MODEL BUILDING USING RANDOMIZED SEARCH CV"""

from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import RandomizedSearchCV

"""HYPER PARAMETERS"""

n_estimators = [int(x) for x in np.linspace(start = 200, stop = 2000, num = 10)]
max_features = ['auto', 'sqrt']
max_depth = [int(x) for x in np.linspace(10, 110, num = 11)]
max_depth.append(None)
min_samples_split = [2, 5, 10]
min_samples_leaf = [1, 2, 4]
bootstrap = [True, False]
random_grid = {'n_estimators': n_estimators,
               'max_features': max_features,
               'max_depth': max_depth,
               'min_samples_split': min_samples_split,
               'min_samples_leaf': min_samples_leaf,
               'bootstrap': bootstrap}

"""RANDOM FOREST REGRESSOR"""

rf = RandomForestRegressor()

"""ADDING THE HYPER PARAMETERS AND RANDOM FOREST REGRESSOR IN RANDOMIZED SEARCH CV"""

rf_random = RandomizedSearchCV(estimator = rf, param_distributions = random_grid, n_iter = 100, cv = 3, verbose=2, random_state=42, n_jobs = -1)

"""TRAINING THE MODEL(FITTING)"""

rf_random.fit(Xtrain,Ytrain)

"""CHECKING THE SCORE FOR TRAIN AND TEST

Train score
"""

rf_random.score(Xtrain,Ytrain)

"""Test score"""

rf_random.score(Xtest,Ytest)

"""Prediction"""

predicted=rf_random.predict(Xtest)

"""MODEL EVALUATION

R^2 VALUE
"""

R2_value=r2_score(Ytest,predicted)
print(R2_value)

"""RMSE"""

Rmse = (np.sqrt(mean_squared_error(Ytest, predicted)))
print(Rmse)

"""MSE"""

metrics.mean_squared_error(Ytest,predicted)

"""MEAN ABSOLUTE ERROR"""

metrics.mean_absolute_error(Ytest,predicted)

"""SCATTER PLOT FOR PEDICTED VALUE V/S ACTUAL"""

import matplotlib.pyplot as plt 
plt.scatter(Ytest,predicted)

"""Creating a list for all salesman"""

salesman=['SLSMAN_1', 'SLSMAN_2', 'SLSMAN_3', 'SLSMAN_4', 'SLSMAN_5',
       'SLSMAN_6', 'SLSMAN_7', 'SLSMAN_8', 'SLSMAN_9', 'SLSMAN_10',
       'SLSMAN_11', 'SLSMAN_12', 'SLSMAN_13', 'SLSMAN_14', 'SLSMAN_15',
       'SLSMAN_16', 'SLSMAN_17', 'SLSMAN_18', 'SLSMAN_19', 'SLSMAN_20',
       'SLSMAN_21', 'SLSMAN_22', 'SLSMAN_23', 'SLSMAN_24', 'SLSMAN_25',
       'SLSMAN_26', 'SLSMAN_27', 'SLSMAN_28', 'SLSMAN_29', 'SLSMAN_30',
       'SLSMAN_31', 'SLSMAN_32', 'SLSMAN_33', 'SLSMAN_34', 'SLSMAN_35',
       'SLSMAN_36', 'SLSMAN_37', 'SLSMAN_38', 'SLSMAN_39', 'SLSMAN_40',
       'SLSMAN_41', 'SLSMAN_42', 'SLSMAN_43', 'SLSMAN_44', 'SLSMAN_45',
       'SLSMAN_46', 'SLSMAN_47', 'SLSMAN_48', 'SLSMAN_49', 'SLSMAN_50',
       'SLSMAN_51', 'SLSMAN_52', 'SLSMAN_53', 'SLSMAN_54', 'SLSMAN_55',
       'SLSMAN_56', 'SLSMAN_57', 'SLSMAN_58', 'SLSMAN_59', 'SLSMAN_60',
       'SLSMAN_61', 'SLSMAN_62', 'SLSMAN_63', 'SLSMAN_64', 'SLSMAN_65',
       'SLSMAN_66', 'SLSMAN_67', 'SLSMAN_68', 'SLSMAN_69', 'SLSMAN_70',
       'SLSMAN_71', 'SLSMAN_73', 'SLSMAN_74', 'SLSMAN_75', 'SLSMAN_76',
       'SLSMAN_77', 'SLSMAN_78', 'SLSMAN_79', 'SLSMAN_80', 'SLSMAN_81',
       'SLSMAN_82', 'SLSMAN_83', 'SLSMAN_84', 'SLSMAN_85', 'SLSMAN_86',
       'SLSMAN_87', 'SLSMAN_88', 'SLSMAN_89', 'SLSMAN_90', 'SLSMAN_91',
       'SLSMAN_92', 'SLSMAN_93', 'SLSMAN_94', 'SLSMAN_95', 'SLSMAN_96',
       'SLSMAN_97', 'SLSMAN_98', 'SLSMAN_99', 'SLSMAN_100', 'SLSMAN_101',
       'SLSMAN_102', 'SLSMAN_103', 'SLSMAN_104', 'SLSMAN_105',
       'SLSMAN_106', 'SLSMAN_107', 'SLSMAN_108', 'SLSMAN_109',
       'SLSMAN_110', 'SLSMAN_111', 'SLSMAN_112', 'SLSMAN_113',
       'SLSMAN_114', 'SLSMAN_115', 'SLSMAN_116', 'SLSMAN_117',
       'SLSMAN_118', 'SLSMAN_119', 'SLSMAN_120', 'SLSMAN_121',
       'SLSMAN_122', 'SLSMAN_123', 'SLSMAN_124', 'SLSMAN_125',
       'SLSMAN_126', 'SLSMAN_127', 'SLSMAN_128', 'SLSMAN_129',
       'SLSMAN_130', 'SLSMAN_131', 'SLSMAN_132', 'SLSMAN_133',
       'SLSMAN_134', 'SLSMAN_135', 'SLSMAN_136', 'SLSMAN_137',
       'SLSMAN_138', 'SLSMAN_139', 'SLSMAN_140', 'SLSMAN_141',
       'SLSMAN_142', 'SLSMAN_143', 'SLSMAN_144', 'SLSMAN_145',
       'SLSMAN_146', 'SLSMAN_147', 'SLSMAN_148', 'SLSMAN_149',
       'SLSMAN_150', 'SLSMAN_151', 'SLSMAN_152', 'SLSMAN_153',
       'SLSMAN_154', 'SLSMAN_155', 'SLSMAN_156', 'SLSMAN_157',
       'SLSMAN_158', 'SLSMAN_159', 'SLSMAN_160', 'SLSMAN_161',
       'SLSMAN_162', 'SLSMAN_163', 'SLSMAN_164', 'SLSMAN_165',
       'SLSMAN_166', 'SLSMAN_167', 'SLSMAN_168', 'SLSMAN_169',
       'SLSMAN_170', 'SLSMAN_171', 'SLSMAN_172', 'SLSMAN_173',
       'SLSMAN_174', 'SLSMAN_175', 'SLSMAN_176', 'SLSMAN_177',
       'SLSMAN_178', 'SLSMAN_179', 'SLSMAN_180', 'SLSMAN_181',
       'SLSMAN_182', 'SLSMAN_183', 'SLSMAN_184', 'SLSMAN_185',
       'SLSMAN_186', 'SLSMAN_187', 'SLSMAN_188', 'SLSMAN_189',
       'SLSMAN_190', 'SLSMAN_191', 'SLSMAN_192', 'SLSMAN_193',
       'SLSMAN_194', 'SLSMAN_195', 'SLSMAN_196', 'SLSMAN_197',
       'SLSMAN_198', 'SLSMAN_199', 'SLSMAN_200', 'SLSMAN_201',
       'SLSMAN_202', 'SLSMAN_203', 'SLSMAN_204', 'SLSMAN_205',
       'SLSMAN_206', 'SLSMAN_207', 'SLSMAN_208', 'SLSMAN_209',
       'SLSMAN_210', 'SLSMAN_211', 'SLSMAN_212', 'SLSMAN_213',
       'SLSMAN_214', 'SLSMAN_215', 'SLSMAN_216', 'SLSMAN_217',
       'SLSMAN_218', 'SLSMAN_219', 'SLSMAN_220', 'SLSMAN_221',
       'SLSMAN_222', 'SLSMAN_223', 'SLSMAN_224', 'SLSMAN_225']

"""Creating a list for all products"""

product=['PROD_3', 'PROD_5', 'PROD_8', 'PROD_10', 'PROD_11', 'PROD_13',
       'PROD_14', 'PROD_15', 'PROD_16', 'PROD_17', 'PROD_18', 'PROD_19',
       'PROD_21', 'PROD_22', 'PROD_23', 'PROD_25', 'PROD_26', 'PROD_27',
       'PROD_31', 'PROD_32', 'PROD_33', 'PROD_35', 'PROD_36', 'PROD_37',
       'PROD_38', 'PROD_39', 'PROD_42', 'PROD_43', 'PROD_45', 'PROD_47',
       'PROD_48', 'PROD_50', 'PROD_51', 'PROD_56', 'PROD_58', 'PROD_59',
       'PROD_61', 'PROD_62', 'PROD_66', 'PROD_74', 'PROD_76', 'PROD_80',
       'PROD_81', 'PROD_82', 'PROD_83', 'PROD_84', 'PROD_85', 'PROD_86',
       'PROD_49', 'PROD_9', 'PROD_12', 'PROD_53', 'PROD_55', 'PROD_57',
       'PROD_63', 'PROD_64', 'PROD_4', 'PROD_20', 'PROD_28', 'PROD_54',
       'PROD_67', 'PROD_52', 'PROD_68', 'PROD_2', 'PROD_46', 'PROD_70',
       'PROD_75', 'PROD_73', 'PROD_40', 'PROD_71', 'PROD_24', 'PROD_34',
       'PROD_44', 'PROD_41', 'PROD_65', 'PROD_77', 'PROD_79', 'PROD_69',
       'PROD_72', 'PROD_1', 'PROD_78', 'PROD_60', 'PROD_29', 'PROD_6',
       'PROD_7', 'PROD_30']

"""Creating an array for predicting the achievement for a particular salesman"""

def predict_achievment(PROD ,SLSMAN ,PLAN_MONTH,TARGET_IN_EA):
  PROD_CD = product.index(PROD)
  SLSMAN_CD= salesman.index(SLSMAN)
  x= np.zeros(len(predictor.columns))
  x[0]= PROD_CD
  x[1]= SLSMAN_CD
  x[2]=PLAN_MONTH
  x[3]=TARGET_IN_EA
  #x= norm_fun(x)
  print(x)
  pred=rf_random.predict([x])[0]
  return pred

predict_achievment("PROD_15","SLSMAN_1",10,16260)

"""Saving the Model"""

import pickle
filename = 'finalized_model.pkl'
pickle.dump(rf_random, open(filename, 'wb'))

pickle.dump(rf_random, open('model.pkl','wb'))

model = pickle.load(open('model.pkl','rb'))

Final_Model = pickle.load(open(filename, 'rb'))

# Save the Modle to file in the current working directory
Model = "Sales_model.pkl"  
with open(Model, 'wb') as file:  
    pickle.dump(rf_random, file)

# Load the Model back from file
with open("D:\VDOS\Sales_model.pkl", 'rb') as file:  
    Target_Model = pickle.load(file)

Target_Model

"""LOADING THE VALIDAION DATASET"""

from google.colab import files 
uploaded = files.upload()

import io
test=pd.read_csv("Validation Dataset.xlsx - Sheet1.csv")

"""REMOVING THE COMA'S B/W THE NUMBERS FROM "TARGET IN EA" VARIABLE"""

test['TARGET_IN_EA'] = test['TARGET_IN_EA'].str.replace(',', '').astype(float)

"""CONVERTING CATEGORICAL VARIABLES INTO NUMERICAL VALUES"""

Le=preprocessing.LabelEncoder()
test["PROD_CD"]=Le.fit_transform(test["PROD_CD"])
test["SLSMAN_CD"]=Le.fit_transform(test["SLSMAN_CD"])

"""DROPING PLAN YEAR AND ACHIEVMENT FROM THE DATASET"""

test=test.drop("PLAN_YEAR",axis=1)
test=test.drop("ACH_IN_EA",axis=1)

"""PREDICTING THE FEBRUARY MONTH TARGET FOR EACH AND  EVERY SALESMAN BASED ON THEIR PREVIOUS MONTH SALES"""

valid_pred=Target_Model.predict(test)

valid_pred

"""CONVERING THE PREDICTED RESULT INTO A DATAFRAME"""

final=pd.DataFrame(valid_pred)

"""APPENDING THE PREDICTED RESULT TO THE VALIDATION DATASET"""

from google.colab import files 
uploaded = files.upload()

import io
validation=pd.read_csv("Validation Dataset.xlsx - Sheet1.csv")

validation.columns

validation=validation.drop("ACH_IN_EA",axis=1)

Finaldata=pd.concat([validation,final],axis=1)

"""CHANGING THE COLUMN NAME FOR PREDICTED VARIABLE"""

Finaldata = Finaldata.rename(columns = {0 : "Target for feb" })

"""FIRST 30 OBSERVATIONS OF FINAL DATA"""

Finaldata.head(30)

"""CONVERTING THE FILE INTO CSV FORMAT"""

Finaldata.to_csv("Finaldata.csv")

!

"""Making an array function for valiadtion dataset"""

Products= ['PROD_3', 'PROD_5', 'PROD_11', 'PROD_13', 'PROD_14', 'PROD_15',
       'PROD_16', 'PROD_17', 'PROD_18', 'PROD_19', 'PROD_22', 'PROD_23',
       'PROD_25', 'PROD_26', 'PROD_27', 'PROD_31', 'PROD_32', 'PROD_33',
       'PROD_35', 'PROD_36', 'PROD_37', 'PROD_38', 'PROD_39', 'PROD_42',
       'PROD_45', 'PROD_47', 'PROD_50', 'PROD_56', 'PROD_58', 'PROD_59',
       'PROD_61', 'PROD_62', 'PROD_80', 'PROD_21', 'PROD_81', 'PROD_20',
       'PROD_28', 'PROD_43', 'PROD_51', 'PROD_54', 'PROD_82', 'PROD_83',
       'PROD_52', 'PROD_4', 'PROD_48', 'PROD_12', 'PROD_6', 'PROD_7',
       'PROD_53', 'PROD_55', 'PROD_57', 'PROD_60', 'PROD_70', 'PROD_75',
       'PROD_78', 'PROD_79', 'PROD_8', 'PROD_30']

Salesman= ['SLSMAN_1', 'SLSMAN_2', 'SLSMAN_3', 'SLSMAN_4', 'SLSMAN_5',
       'SLSMAN_6', 'SLSMAN_7', 'SLSMAN_8', 'SLSMAN_9', 'SLSMAN_10',
       'SLSMAN_11', 'SLSMAN_12', 'SLSMAN_13', 'SLSMAN_14', 'SLSMAN_15',
       'SLSMAN_16', 'SLSMAN_17', 'SLSMAN_18', 'SLSMAN_19', 'SLSMAN_21',
       'SLSMAN_23', 'SLSMAN_25', 'SLSMAN_27', 'SLSMAN_29', 'SLSMAN_30',
       'SLSMAN_31', 'SLSMAN_32', 'SLSMAN_33', 'SLSMAN_34', 'SLSMAN_35',
       'SLSMAN_36', 'SLSMAN_37', 'SLSMAN_38', 'SLSMAN_39', 'SLSMAN_40',
       'SLSMAN_41', 'SLSMAN_42', 'SLSMAN_43', 'SLSMAN_44', 'SLSMAN_45',
       'SLSMAN_46', 'SLSMAN_47', 'SLSMAN_48', 'SLSMAN_49', 'SLSMAN_50',
       'SLSMAN_51', 'SLSMAN_52', 'SLSMAN_53', 'SLSMAN_54', 'SLSMAN_56',
       'SLSMAN_57', 'SLSMAN_58', 'SLSMAN_60', 'SLSMAN_62', 'SLSMAN_64',
       'SLSMAN_66', 'SLSMAN_68', 'SLSMAN_70', 'SLSMAN_73', 'SLSMAN_74',
       'SLSMAN_75', 'SLSMAN_79', 'SLSMAN_80', 'SLSMAN_81', 'SLSMAN_82',
       'SLSMAN_83', 'SLSMAN_84', 'SLSMAN_85', 'SLSMAN_86', 'SLSMAN_87',
       'SLSMAN_88', 'SLSMAN_89', 'SLSMAN_90', 'SLSMAN_91', 'SLSMAN_92',
       'SLSMAN_93', 'SLSMAN_94', 'SLSMAN_95', 'SLSMAN_96', 'SLSMAN_97',
       'SLSMAN_98', 'SLSMAN_99', 'SLSMAN_100', 'SLSMAN_101', 'SLSMAN_102',
       'SLSMAN_103', 'SLSMAN_104', 'SLSMAN_105', 'SLSMAN_106',
       'SLSMAN_107', 'SLSMAN_108', 'SLSMAN_109', 'SLSMAN_110',
       'SLSMAN_111', 'SLSMAN_112', 'SLSMAN_113', 'SLSMAN_114',
       'SLSMAN_115', 'SLSMAN_117', 'SLSMAN_119', 'SLSMAN_121',
       'SLSMAN_122', 'SLSMAN_123', 'SLSMAN_124', 'SLSMAN_125',
       'SLSMAN_126', 'SLSMAN_127', 'SLSMAN_128', 'SLSMAN_129',
       'SLSMAN_130', 'SLSMAN_131', 'SLSMAN_132', 'SLSMAN_134',
       'SLSMAN_136', 'SLSMAN_138', 'SLSMAN_139', 'SLSMAN_140',
       'SLSMAN_141', 'SLSMAN_142', 'SLSMAN_143', 'SLSMAN_144',
       'SLSMAN_146', 'SLSMAN_148', 'SLSMAN_150', 'SLSMAN_152',
       'SLSMAN_154', 'SLSMAN_156', 'SLSMAN_158', 'SLSMAN_159',
       'SLSMAN_160', 'SLSMAN_161', 'SLSMAN_162', 'SLSMAN_163',
       'SLSMAN_164', 'SLSMAN_165', 'SLSMAN_166', 'SLSMAN_168',
       'SLSMAN_169', 'SLSMAN_170', 'SLSMAN_171', 'SLSMAN_172',
       'SLSMAN_173', 'SLSMAN_174', 'SLSMAN_176', 'SLSMAN_178',
       'SLSMAN_180', 'SLSMAN_181', 'SLSMAN_182', 'SLSMAN_183',
       'SLSMAN_184', 'SLSMAN_185', 'SLSMAN_186', 'SLSMAN_190',
       'SLSMAN_191', 'SLSMAN_192', 'SLSMAN_193', 'SLSMAN_194',
       'SLSMAN_195', 'SLSMAN_196', 'SLSMAN_197', 'SLSMAN_198',
       'SLSMAN_199', 'SLSMAN_200', 'SLSMAN_201', 'SLSMAN_202',
       'SLSMAN_204', 'SLSMAN_206', 'SLSMAN_208', 'SLSMAN_209',
       'SLSMAN_210', 'SLSMAN_211', 'SLSMAN_212', 'SLSMAN_213',
       'SLSMAN_214', 'SLSMAN_215', 'SLSMAN_216', 'SLSMAN_217']

def predict_achievment(PRODUCT ,SALESMAN ,PLAN_MONTH,TARGET_IN_EA):

  Products= ['PROD_3', 'PROD_5', 'PROD_11', 'PROD_13', 'PROD_14', 'PROD_15',
       'PROD_16', 'PROD_17', 'PROD_18', 'PROD_19', 'PROD_22', 'PROD_23',
       'PROD_25', 'PROD_26', 'PROD_27', 'PROD_31', 'PROD_32', 'PROD_33',
       'PROD_35', 'PROD_36', 'PROD_37', 'PROD_38', 'PROD_39', 'PROD_42',
       'PROD_45', 'PROD_47', 'PROD_50', 'PROD_56', 'PROD_58', 'PROD_59',
       'PROD_61', 'PROD_62', 'PROD_80', 'PROD_21', 'PROD_81', 'PROD_20',
       'PROD_28', 'PROD_43', 'PROD_51', 'PROD_54', 'PROD_82', 'PROD_83',
       'PROD_52', 'PROD_4', 'PROD_48', 'PROD_12', 'PROD_6', 'PROD_7',
       'PROD_53', 'PROD_55', 'PROD_57', 'PROD_60', 'PROD_70', 'PROD_75',
       'PROD_78', 'PROD_79', 'PROD_8', 'PROD_30']
  Salesman= ['SLSMAN_1', 'SLSMAN_2', 'SLSMAN_3', 'SLSMAN_4', 'SLSMAN_5',
       'SLSMAN_6', 'SLSMAN_7', 'SLSMAN_8', 'SLSMAN_9', 'SLSMAN_10',
       'SLSMAN_11', 'SLSMAN_12', 'SLSMAN_13', 'SLSMAN_14', 'SLSMAN_15',
       'SLSMAN_16', 'SLSMAN_17', 'SLSMAN_18', 'SLSMAN_19', 'SLSMAN_21',
       'SLSMAN_23', 'SLSMAN_25', 'SLSMAN_27', 'SLSMAN_29', 'SLSMAN_30',
       'SLSMAN_31', 'SLSMAN_32', 'SLSMAN_33', 'SLSMAN_34', 'SLSMAN_35',
       'SLSMAN_36', 'SLSMAN_37', 'SLSMAN_38', 'SLSMAN_39', 'SLSMAN_40',
       'SLSMAN_41', 'SLSMAN_42', 'SLSMAN_43', 'SLSMAN_44', 'SLSMAN_45',
       'SLSMAN_46', 'SLSMAN_47', 'SLSMAN_48', 'SLSMAN_49', 'SLSMAN_50',
       'SLSMAN_51', 'SLSMAN_52', 'SLSMAN_53', 'SLSMAN_54', 'SLSMAN_56',
       'SLSMAN_57', 'SLSMAN_58', 'SLSMAN_60', 'SLSMAN_62', 'SLSMAN_64',
       'SLSMAN_66', 'SLSMAN_68', 'SLSMAN_70', 'SLSMAN_73', 'SLSMAN_74',
       'SLSMAN_75', 'SLSMAN_79', 'SLSMAN_80', 'SLSMAN_81', 'SLSMAN_82',
       'SLSMAN_83', 'SLSMAN_84', 'SLSMAN_85', 'SLSMAN_86', 'SLSMAN_87',
       'SLSMAN_88', 'SLSMAN_89', 'SLSMAN_90', 'SLSMAN_91', 'SLSMAN_92',
       'SLSMAN_93', 'SLSMAN_94', 'SLSMAN_95', 'SLSMAN_96', 'SLSMAN_97',
       'SLSMAN_98', 'SLSMAN_99', 'SLSMAN_100', 'SLSMAN_101', 'SLSMAN_102',
       'SLSMAN_103', 'SLSMAN_104', 'SLSMAN_105', 'SLSMAN_106',
       'SLSMAN_107', 'SLSMAN_108', 'SLSMAN_109', 'SLSMAN_110',
       'SLSMAN_111', 'SLSMAN_112', 'SLSMAN_113', 'SLSMAN_114',
       'SLSMAN_115', 'SLSMAN_117', 'SLSMAN_119', 'SLSMAN_121',
       'SLSMAN_122', 'SLSMAN_123', 'SLSMAN_124', 'SLSMAN_125',
       'SLSMAN_126', 'SLSMAN_127', 'SLSMAN_128', 'SLSMAN_129',
       'SLSMAN_130', 'SLSMAN_131', 'SLSMAN_132', 'SLSMAN_134',
       'SLSMAN_136', 'SLSMAN_138', 'SLSMAN_139', 'SLSMAN_140',
       'SLSMAN_141', 'SLSMAN_142', 'SLSMAN_143', 'SLSMAN_144',
       'SLSMAN_146', 'SLSMAN_148', 'SLSMAN_150', 'SLSMAN_152',
       'SLSMAN_154', 'SLSMAN_156', 'SLSMAN_158', 'SLSMAN_159',
       'SLSMAN_160', 'SLSMAN_161', 'SLSMAN_162', 'SLSMAN_163',
       'SLSMAN_164', 'SLSMAN_165', 'SLSMAN_166', 'SLSMAN_168',
       'SLSMAN_169', 'SLSMAN_170', 'SLSMAN_171', 'SLSMAN_172',
       'SLSMAN_173', 'SLSMAN_174', 'SLSMAN_176', 'SLSMAN_178',
       'SLSMAN_180', 'SLSMAN_181', 'SLSMAN_182', 'SLSMAN_183',
       'SLSMAN_184', 'SLSMAN_185', 'SLSMAN_186', 'SLSMAN_190',
       'SLSMAN_191', 'SLSMAN_192', 'SLSMAN_193', 'SLSMAN_194',
       'SLSMAN_195', 'SLSMAN_196', 'SLSMAN_197', 'SLSMAN_198',
       'SLSMAN_199', 'SLSMAN_200', 'SLSMAN_201', 'SLSMAN_202',
       'SLSMAN_204', 'SLSMAN_206', 'SLSMAN_208', 'SLSMAN_209',
       'SLSMAN_210', 'SLSMAN_211', 'SLSMAN_212', 'SLSMAN_213',
       'SLSMAN_214', 'SLSMAN_215', 'SLSMAN_216', 'SLSMAN_217']

  PROD_CD = Products.index(PRODUCT)
  SLSMAN_CD= Salesman.index(SALESMAN)
  x= np.zeros(len(test.columns))
  x[0]= PROD_CD
  x[1]= SLSMAN_CD
  x[2]=PLAN_MONTH
  x[3]=TARGET_IN_EA
  print(x)
  pred=Target_Model.predict([x])[0]
  return pred

predict_achievment("PROD_22","SLSMAN_1",1,15200)




